# машинное обучение

# ML - решает следующую задачу
# Требуется подогнать заданный набор точек даннымим под соотвествующую функцию (отображение входа на выход),
# которая улавливает важные сигналы в данных и игнорирует помехи, а затем убедиться, что на новых данных
# функция работает хорошо.

# Обучение с учителем (supervised learning)
# Обучение без учителя (unsupervised learning)

# ОчУ - моделирует отношение между признаками и метками. Также модели служат для предсказания меток на основе
# обучающих данных маркированных.

# - задачи классификации (метки - дискретные: два и более)
# - задачи регрессии (метки/результат: непрерывные величины)

# ОбУ - моделирование признакми без меток. Такие модели служат для выявления структуры немаркированных данных.

# - задача кластеризации (выделяет отдельные группы данных)
# - понижение размерности (поиск более сжатого представления данных)

# Существуют методы частиного обучения (semi-supervised learning). Не все данные промаркированы.

# Методы обучения с подкреплением (reinforcement learning). Система улучшает свои характеристики на
# основе взаимодейтсвия (обратной связи) со средой. При этом взаимодйествии система получается сигналы
# (функции наград), которые несут в себе информацию насколько хорошо/плохо система решила задачу (с точки
# зрения среды). Итоговая награда не станет максимальной.

import seaborn as sns

iris = sns.load_dataset("iris")

print(iris.head())
print(type(iris))

print(type(iris.values()))

print(iris.values.shape)

print(iris.columns)

print(iris.index)

# Строки - отдельные обьекты - образцы (sample)
# Столбцы - признаки (features) - соответсвуют конкретным наблюдениям
# Матрицы признаков (features matrix) размер [число образцов x число признаков]
# Целевой массив, массив меток (targets) - одномерный массив [1 x число образцов] - данные, которые
# мы хотим предсказать на основе имеющихся данных
# Зависимые (метка) и незавивисимые переменные (признаки)

# Процесс построения системы машинного обучения:

# 1. Предварительная обработка
# - на вход поступают наобработанные данные и метки
# - происходит выбор признаков, масштабирование признаков
# - понижение рамзерности
# - выборка образцов
# - на выход набор данных: обучающий, тестовый

# 2. Обучение
# - выбор модели
# - прекрестная проверка
# - метрики эффективности
# - оптимизация гиперпараметров. Параметры, которые получаются не из данных, а являются характеристиками модели

# 3. Оценка и формирование финальной модели

# 4. Прогнозирование (использование модели)

# SciKit-learn

# 1. Выбираем класс модели
# 2. Устанавливаем гиперпараметры модели
# 3. Созадем матрицу признаков и целевой массив
# 4. Обучение модели fit()
# 5. Применять модель к новым данным
# - predict() (с учителем)
# - predict() или transform() (без учителя)

# Обучение с учителем: Линейная регрессия

## Простая линейная регресиия

# y = ax + b

import matplotlib.pyplot as plt
import numpy as np

# 1

np.random.seed(1)
x = 10 * np.random.rand(50)

y = 2 * x * np.random.randn(50)

plt.scatter(x, y)

# 1. Выбираем класс модели

from sklearn.linear_model import LinearRegression

# 2. Устанавливаем гипермараметры модели

model = LinearRegression(fit_intercept=False)

# 3. Создаем матрицу признаков и целевой массив

print(x.shape)
print(y.shape)

X = x[:, np.newaxis]

# 4. Обучение модели fit()

model.fit(x, y)

print(model.coef_[0])
# 5. Применять модель к новым данным
xfit = np.linspace(0, 10, 5)
yfit = model.predict((xfit[:, np.newaxis]))

plt.scatter(xfit, yfit)

plt.show()
